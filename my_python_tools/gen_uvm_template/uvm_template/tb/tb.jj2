`ifndef TB_C
`define TB_C

class tb_c extends uvm_env;

	// Property
	// declare env
	{{ env_name }}_env_c {{ env_name }}_env;
	vseqr_c      vseqr;

	// register model handle
	//yapp_router_regs_t  yapp_rm;
	// adapter handle
	//hbus_reg_adapter    reg2hbus;

	`uvm_component_utils(tb_c)

	function new (string name = "tb_c", uvm_component parent);
		super.new(name, parent);

	endfunction

	virtual function void build_phase(uvm_phase phase);
		super.build_phase(phase);
		// config object
		// uvm_config_db#()::set*
		// ----------
		// Create property env
		{{ env_name }}_env = {{ env_name }}_env_c::type_id::create("{{ env_name }}_env", this);
		vseqr      = vseqr_c::type_id::create("vseqr", this);

		// ------------------------------------
		// Create, build and lock register model
		// ------------------------------------
		//yapp_rm = yapp_router_regs_t::type_id::create("yapp_rm", this);
		//yapp_rm.build();
		//yapp_rm.lock_model();
		// set HDL path root
		//yapp_rm.set_hdl_path_root("hw_top.dut");
		// auto (implicit) prediction
		//yapp_rm.default_map.set_auto_predict(1);
		// HBUS adapter instance
		//reg2hbus = hbus_reg_adapter::type_id::create("reg2hbus",this);

	endfunction

	
	function void connect_phase(uvm_phase phase);
		// ------------------------------------------------
		// set sequencer and adapter for register model map
		// ------------------------------------------------
		//yapp_rm.default_map.set_sequencer( hbus.masters[0].sequencer, reg2hbus);

	endfunction : connect_phase
endclass

`endif //TB_C
