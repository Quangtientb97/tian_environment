// Define report format 
`define MY_SERVER
`ifdef MY_SERVER
class my_server extends uvm_default_report_server;
	function string compose_report_message(
		uvm_report_message report_message,
		string report_object_name = ""
	);
		uvm_verbosity verb;
		uvm_severity  sev ;
		string id         ;
		string message    ;
		string scope      ;
		string file_name;
		string arg_verbosity; 
		int    line;

		$value$plusargs("UVM_VERBOSITY=%s", arg_verbosity);

		$cast(verb , report_message.get_verbosity());
		$cast(sev  , report_message.get_severity());
		scope    = report_message.get_report_object().get_full_name();
		id       = report_message.get_id();
		message  = report_message.get_message();
		filename = report_message.get_filename();
		line     = report_message.get_line();

		// \033[30;1m - Black color
		// \033[31;1m - Red color
		// \033[32;1m - Green color
		// \033[33;1m - Yellow co1lor
		// \033[34;1m - Blue color
		// \033[35;1m - Magenta color
		// \033[36;1m - Cyan color
		// \033[37;1m - White color
		// \033[0m    - Reset

		if (arg_verbosity != "UVM_LOW") begin
			return $psprintf("\t[%0s+%0d]\n[%0t] %0s (%0s) [%0s] %0s", filename, line, $time, sev.name, scope, id, message);
		end
		else begin
			return $psprintf("[%0t] %0s (%0s) %0s", $time, sev.name, id, message);
		end
	endfunction
endclass
`endif

`ifndef BASIC_TEST_C
`define BASIC_TEST_C
class basic_test_c extends uvm_test;
	//---------------------------------------------------------------------
	// 	Property
	//---------------------------------------------------------------------
	tb_c tb;
	uvm_factory m_factory; 

	`uvm_component_utils(basic_test_c)

	function new(string name = "basic_test_c", uvm_component parent = null);
		super.new(name, parent);

	endfunction

	virtual function void build_phase(uvm_phase phase);
		// uvm_config_db#(uvm_object_wrapper)::set*
		// set sequence to sequencer in order to start test
		uvm_config_int::set(this, "*", "recording_detail", 1);
		uvm_config_wrapper::set(this, "tb.vseqr.run_phase",
			"default_sequence",
			sequence_0::get_type());
		super.build_phase(phase);

		tb = tb_c::type_id::create("tb", this);

	endfunction

	task run_phase(uvm_phase phase);
		super.run_phase(phase);
		uvm_top.print_topology();
	endtask

	function void end_of_elaboration_phase(uvm_phase phase);
		uvm_top.print_topology();
		m_factory = uvm_factory::get();
		m_factory.print();
	endfunction

	`ifdef MY_SERVER
	function void start_of_simulation();
		my_server srv = new();
		uvm_report_server::set_server(srv);
		srv.print();
	endfunction
	`endif

	//
	// Calculate the pass or fail status for the test in the final phase method of the
	// test. If a UVM_FATAL, UVM_ERROR, or a UVM_WARNING message has been generated the
	// test will fail.
	//
	function void final_phase(uvm_phase phase);
		uvm_report_server svr;
		`uvm_info("final_phase", "Entered...",UVM_LOW)

		super.final_phase(phase);

		svr = uvm_report_server::get_server();

		if (svr.get_severity_count(UVM_FATAL) + svr.get_severity_count(UVM_ERROR) > 0) begin
			`uvm_info("final_phase", "\n#------------------------#", UVM_LOW)
			`uvm_info("final_phase", "\n#      TEST FAILED!!!    #", UVM_LOW)
			`uvm_info("final_phase", "\n#------------------------#", UVM_LOW)
		end
		else begin
			`uvm_info("final_phase", "\n#------------------------#", UVM_LOW)
			`uvm_info("final_phase", "\n#      TEST PASSED!!!    #", UVM_LOW)
			`uvm_info("final_phase", "\n#------------------------#", UVM_LOW)
		end

		`uvm_info("final_phase", "Exiting...", UVM_LOW)
	endfunction: final_phase

	function void check_phase(uvm_phase phase);
		`uvm_info(get_full_name(), "check_config_usage\n", UVM_LOW);
		check_config_usage();
	endfunction

endclass

`endif //BASIC_TEST_C
